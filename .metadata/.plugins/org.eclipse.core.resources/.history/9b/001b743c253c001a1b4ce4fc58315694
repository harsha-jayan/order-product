package com.soagrowers.productquery.querysidegraphql.handlers;

import org.axonframework.eventhandling.annotation.EventHandler;
import org.axonframework.eventhandling.replay.ReplayAware;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.soagrowers.productevents.events.ProductAddedEvent;
import com.soagrowers.productevents.events.ProductDeleteEvent;
import com.soagrowers.productevents.events.ProductSaleableEvent;
import com.soagrowers.productevents.events.ProductUnsaleableEvent;
import com.soagrowers.productevents.events.ProductUpdatedEvent;
import com.soagrowers.productquery.domain.Product;


@Component
public class ProductEventHandler implements ReplayAware {
	
    private static final Logger LOG = LoggerFactory.getLogger(ProductEventHandler.class);

    @EventHandler public void handle(ProductAddedEvent event) {
  	  LOG.info("ProductAddedEvent: [{}] '{}'", event.getId(), event.getName());
  	  productRepository.save(new Product(event.getId(), event.getName(), false)); }
  	 

      @EventHandler
      public void handle(ProductSaleableEvent event) {
          LOG.info("ProductSaleableEvent: [{}]", event.getId());
          if (productRepository.exists(event.getId())) {
              Product product = productRepository.findOne(event.getId());
              if (!product.isSaleable()) {
                  product.setSaleable(true);
                  productRepository.save(product);
              }
          }
      }
      
      @EventHandler
      public void handle(ProductUpdatedEvent event) {
      	LOG.info("ProductUpdatedEvent: [{}]", event.getId());
          if (productRepository.exists(event.getId())) {
              Product product = productRepository.findOne(event.getId());
                  product.setName(event.getName());;
                  productRepository.save(product);
              
          }

      }
      @EventHandler
      public void handle(ProductDeleteEvent event) {
      	LOG.info("ProductDeleteEvent: [{}]", event.getId());
          if (productRepository.exists(event.getId())) {
              Product product = productRepository.findOne(event.getId());
                  productRepository.delete(product);
              
          }

      }

      @EventHandler
      public void handle(ProductUnsaleableEvent event) {
          LOG.info("ProductUnsaleableEvent: [{}]", event.getId());

          if (productRepository.exists(event.getId())) {
              Product product = productRepository.findOne(event.getId());
              if (product.isSaleable()) {
                  product.setSaleable(false);
                  productRepository.save(product);
              }
          }
      }

	@Override
	public void beforeReplay() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterReplay() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onReplayFailed(Throwable cause) {
		// TODO Auto-generated method stub
		
	}


}
